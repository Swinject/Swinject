<% let type_count = 9 %>
// sourcery:inline:ServiceEntryTypeForwarding
extension ServiceEntry {
    /// Adds another type which should be resolved using this ServiceEntry - i.e. using the same object scope,
    /// arguments and `initCompleted` closures
    ///
    /// - Parameters:
    ///     - type: Type resolution of which should be forwarded
    ///     - name: A registration name, which is used to differentiate from other registrations of the same `type`
    @discardableResult
    public func implements<T>(_ type: T.Type, name: String? = nil) -> ServiceEntry<Service> {
        container?.forward(type, name: name, to: self)
        return self
    }

<%_ (2...type_count).forEach { i in
    let types = (1...i).map { "T\($0)" }.joined(separator: ", ")
    let params = (1...i).map { "_ type\($0): T\($0).Type"}.joined(separator: ", ")
-%>
    /// Adds multiple types which should be resolved using this ServiceEntry - i.e. using the same object scope,
    /// arguments and `initCompleted` closures
    ///
    /// - Parameters:
    ///     - types: List of <%= i %> types resolution of which should be forwarded
    @discardableResult
    public func implements<<%= types %>>(<%= params %>) -> ServiceEntry<Service> {
        return <%= (1...i).map { "implements(type\($0))" }.joined(separator: ".") %>
    }<%= i < type_count ? "\n" : "" %>
<%_ } -%>
}
// sourcery:end
