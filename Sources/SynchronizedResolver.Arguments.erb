//
//  SynchronizedResolver.Arguments.swift
//  Swinject
//
//  Created by Yoichi Tagaya on 11/23/15.
//  Copyright Â© 2015 Swinject Contributors. All rights reserved.
//

//
// NOTICE:
//
// SynchronizedResolver.Arguments.swift is generated from SynchronizedResolver.Arguments.erb by ERB.
// Do NOT modify SynchronizedResolver.Arguments.swift directly.
// Instead, modify SynchronizedResolver.Arguments.erb and run `script/gencode` at the project root directory to generate the code.
//

<% arg_count = 9 %>

// MARK: - ResolverType with Arguments
extension SynchronizedResolver {
<% (1..arg_count).each do |i| %>
<%   arg_types = (1..i).map { |n| "Arg#{n}" }.join(", ") %>
<%   arg_param_name = i == 1 ? "argument" : "arguments" %>
<%   arg_param_def = i == 1 ? "argument: Arg1" : "arguments arg1: Arg1, " + (2..i).map{ |n| "_ arg#{n}: Arg#{n}" }.join(", ") %>
<%   arg_param_call = i == 1 ? "argument" : (1..i).map{ |n| "arg#{n}" }.join(", ") %>
    internal func resolve<Service, <%= arg_types %>>(
        serviceType: Service.Type,
        <%= arg_param_def %>) -> Service?
    {
        return container.lock.sync {
            return self.container.resolve(serviceType, <%= arg_param_name %>: <%= arg_param_call %>)
        }
    }

    internal func resolve<Service, <%= arg_types %>>(
        serviceType: Service.Type,
        name: String?,
        <%= arg_param_def %>) -> Service?
    {
        return container.lock.sync {
            return self.container.resolve(serviceType, name: name, <%= arg_param_name %>: <%= arg_param_call %>)
        }
    }

<% end %>
}
